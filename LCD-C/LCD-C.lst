CCS PCM C Compiler, Version 5.042, 43871               22-mar-17 09:38

               Filename:   D:\Informações\PIC\LCD-C\LCD-C.lst

               ROM used:   332 words (4%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           15 (4%) worst case
               Stack used: 3 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   120
0003:  NOP
.................... ///////////////////////////////////////////////////////////// 
.................... ////  Zilocchi Eletrônica                                //// 
.................... ////                                                     //// 
.................... ////  Programa para trabalhar com o PIC em linguagem  C  //// 
.................... ////  Projeto: Eng. Fabrício de Lima Ribeiro             //// 
.................... ////  11/06/2014                                         //// 
.................... ///////////////////////////////////////////////////////////// 
....................  
.................... #include <16F876.h> 
.................... //////////// Standard Header file for the PIC16F876 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F876 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
....................  
.................... #list 
....................  
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP 
.................... #use delay(clock=4194304) 
000C:  MOVLW  22
000D:  MOVWF  04
000E:  BCF    03.7
000F:  MOVF   00,W
0010:  BTFSC  03.2
0011:  GOTO   01F
0012:  MOVLW  01
0013:  MOVWF  78
0014:  CLRF   77
0015:  DECFSZ 77,F
0016:  GOTO   015
0017:  DECFSZ 78,F
0018:  GOTO   014
0019:  MOVLW  5B
001A:  MOVWF  77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 00,F
001E:  GOTO   012
001F:  RETURN
....................  
.................... #include <LCD_PORTB.C> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                     The following have special meaning:               //// 
.................... ////                      \f  Clear display                                //// 
.................... ////                      \n  Go to start of second line                   //// 
.................... ////                      \b  Move back one position                       //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... //#if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... //#endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0033:  MOVLW  0F
0034:  BSF    03.5
0035:  ANDWF  06,W
0036:  IORLW  F0
0037:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0038:  BCF    03.5
0039:  BSF    06.2
....................    delay_cycles(1); 
003A:  NOP
....................    lcd_output_enable(1); 
003B:  BSF    06.0
....................    delay_cycles(1); 
003C:  NOP
....................    high = lcd_read_nibble(); 
003D:  CALL   02C
003E:  MOVF   78,W
003F:  MOVWF  29
....................        
....................    lcd_output_enable(0); 
0040:  BCF    06.0
....................    delay_cycles(1); 
0041:  NOP
....................    lcd_output_enable(1); 
0042:  BSF    06.0
....................    delay_us(1); 
0043:  NOP
....................    low = lcd_read_nibble(); 
0044:  CALL   02C
0045:  MOVF   78,W
0046:  MOVWF  28
....................        
....................    lcd_output_enable(0); 
0047:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0048:  MOVLW  0F
0049:  BSF    03.5
004A:  ANDWF  06,W
004B:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
004C:  BCF    03.5
004D:  SWAPF  29,W
004E:  MOVWF  77
004F:  MOVLW  F0
0050:  ANDWF  77,F
0051:  MOVF   77,W
0052:  IORWF  28,W
0053:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
002C:  MOVF   06,W
002D:  MOVWF  77
002E:  SWAPF  06,W
002F:  ANDLW  0F
0030:  MOVWF  78
....................   #endif 
0031:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0020:  SWAPF  29,W
0021:  ANDLW  F0
0022:  MOVWF  77
0023:  MOVLW  0F
0024:  ANDWF  06,W
0025:  IORWF  77,W
0026:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0027:  NOP
....................    lcd_output_enable(1); 
0028:  BSF    06.0
....................    delay_us(2); 
0029:  GOTO   02A
....................    lcd_output_enable(0); 
002A:  BCF    06.0
002B:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................    lcd_output_rs(0); 
*
0032:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0054:  MOVF   78,W
0055:  MOVWF  28
0056:  BTFSC  28.7
0057:  GOTO   033
....................    lcd_output_rs(address); 
0058:  BTFSS  26.0
0059:  BCF    06.1
005A:  BTFSC  26.0
005B:  BSF    06.1
....................    delay_cycles(1); 
005C:  NOP
....................    lcd_output_rw(0); 
005D:  BCF    06.2
....................    delay_cycles(1); 
005E:  NOP
....................    lcd_output_enable(0); 
005F:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0060:  SWAPF  27,W
0061:  MOVWF  28
0062:  MOVLW  0F
0063:  ANDWF  28,F
0064:  MOVF   28,W
0065:  MOVWF  29
0066:  CALL   020
....................    lcd_send_nibble(n & 0xf); 
0067:  MOVF   27,W
0068:  ANDLW  0F
0069:  MOVWF  28
006A:  MOVWF  29
006B:  CALL   020
006C:  RETURN
.................... } 
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
006D:  MOVLW  0F
006E:  BSF    03.5
006F:  ANDWF  06,W
0070:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
0071:  BCF    06.0
....................    lcd_rs_tris(); 
0072:  BCF    06.1
....................    lcd_rw_tris(); 
0073:  BCF    06.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0074:  BCF    03.5
0075:  BCF    06.1
....................    lcd_output_rw(0); 
0076:  BCF    06.2
....................    lcd_output_enable(0); 
0077:  BCF    06.0
....................      
....................    delay_ms(15); 
0078:  MOVLW  0F
0079:  MOVWF  22
007A:  CALL   00C
....................    for(i=1;i<=3;++i) 
007B:  MOVLW  01
007C:  MOVWF  21
007D:  MOVF   21,W
007E:  SUBLW  03
007F:  BTFSS  03.0
0080:  GOTO   089
....................    { 
....................        lcd_send_nibble(3); 
0081:  MOVLW  03
0082:  MOVWF  29
0083:  CALL   020
....................        delay_ms(5); 
0084:  MOVLW  05
0085:  MOVWF  22
0086:  CALL   00C
0087:  INCF   21,F
0088:  GOTO   07D
....................    } 
....................      
....................    lcd_send_nibble(2); 
0089:  MOVLW  02
008A:  MOVWF  29
008B:  CALL   020
....................    for(i=0;i<=3;++i) 
008C:  CLRF   21
008D:  MOVF   21,W
008E:  SUBLW  03
008F:  BTFSS  03.0
0090:  GOTO   09A
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0091:  MOVF   21,W
0092:  CALL   004
0093:  MOVWF  22
0094:  CLRF   26
0095:  MOVF   22,W
0096:  MOVWF  27
0097:  CALL   032
0098:  INCF   21,F
0099:  GOTO   08D
009A:  BCF    0A.3
009B:  BCF    0A.4
009C:  GOTO   12D (RETURN)
.................... } 
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
0103:  DECFSZ 23,W
0104:  GOTO   106
0105:  GOTO   109
....................       address=LCD_LINE_TWO; 
0106:  MOVLW  40
0107:  MOVWF  24
0108:  GOTO   10A
....................    else 
....................       address=0; 
0109:  CLRF   24
....................       
....................    address+=x-1; 
010A:  MOVLW  01
010B:  SUBWF  22,W
010C:  ADDWF  24,F
....................    lcd_send_byte(0,0x80|address); 
010D:  MOVF   24,W
010E:  IORLW  80
010F:  MOVWF  25
0110:  CLRF   26
0111:  MOVF   25,W
0112:  MOVWF  27
0113:  CALL   032
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
*
00EC:  MOVF   21,W
00ED:  XORLW  0C
00EE:  BTFSC  03.2
00EF:  GOTO   0F7
00F0:  XORLW  06
00F1:  BTFSC  03.2
00F2:  GOTO   0FF
00F3:  XORLW  02
00F4:  BTFSC  03.2
00F5:  GOTO   115
00F6:  GOTO   11A
....................    { 
....................       case '\f'   :  lcd_send_byte(0,1); 
00F7:  CLRF   26
00F8:  MOVLW  01
00F9:  MOVWF  27
00FA:  CALL   032
....................                      delay_ms(2); 
00FB:  MOVLW  02
00FC:  MOVWF  22
00FD:  CALL   00C
....................                      break; 
00FE:  GOTO   11F
....................                       
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00FF:  MOVLW  01
0100:  MOVWF  22
0101:  MOVLW  02
0102:  MOVWF  23
*
0114:  GOTO   11F
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0115:  CLRF   26
0116:  MOVLW  10
0117:  MOVWF  27
0118:  CALL   032
0119:  GOTO   11F
....................       
....................       default     : lcd_send_byte(1,c);     break; 
011A:  MOVLW  01
011B:  MOVWF  26
011C:  MOVF   21,W
011D:  MOVWF  27
011E:  CALL   032
....................    } 
011F:  RETURN
.................... } 
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
....................  
.................... void lcd_symbols1()   
.................... {  
....................    lcd_send_byte(0x00, 0x40); 
*
009D:  CLRF   26
009E:  MOVLW  40
009F:  MOVWF  27
00A0:  CALL   032
....................    lcd_send_byte(0x01, 0b00000000); 
00A1:  MOVLW  01
00A2:  MOVWF  26
00A3:  CLRF   27
00A4:  CALL   032
....................    lcd_send_byte(0x01, 0b00001010); 
00A5:  MOVLW  01
00A6:  MOVWF  26
00A7:  MOVLW  0A
00A8:  MOVWF  27
00A9:  CALL   032
....................    lcd_send_byte(0x01, 0b00001010); 
00AA:  MOVLW  01
00AB:  MOVWF  26
00AC:  MOVLW  0A
00AD:  MOVWF  27
00AE:  CALL   032
....................    lcd_send_byte(0x01, 0b00000000); 
00AF:  MOVLW  01
00B0:  MOVWF  26
00B1:  CLRF   27
00B2:  CALL   032
....................    lcd_send_byte(0x01, 0b00010001); 
00B3:  MOVLW  01
00B4:  MOVWF  26
00B5:  MOVLW  11
00B6:  MOVWF  27
00B7:  CALL   032
....................    lcd_send_byte(0x01, 0b00001110); 
00B8:  MOVLW  01
00B9:  MOVWF  26
00BA:  MOVLW  0E
00BB:  MOVWF  27
00BC:  CALL   032
....................    lcd_send_byte(0x01, 0b00000000); 
00BD:  MOVLW  01
00BE:  MOVWF  26
00BF:  CLRF   27
00C0:  CALL   032
00C1:  BCF    0A.3
00C2:  BCF    0A.4
00C3:  GOTO   12E (RETURN)
.................... }  
....................  
.................... void lcd_symbols2()   
.................... {  
....................    lcd_send_byte(0x01, 0x40); 
00C4:  MOVLW  01
00C5:  MOVWF  26
00C6:  MOVLW  40
00C7:  MOVWF  27
00C8:  CALL   032
....................    lcd_send_byte(0x01, 0b00000000); 
00C9:  MOVLW  01
00CA:  MOVWF  26
00CB:  CLRF   27
00CC:  CALL   032
....................    lcd_send_byte(0x01, 0b00001010); 
00CD:  MOVLW  01
00CE:  MOVWF  26
00CF:  MOVLW  0A
00D0:  MOVWF  27
00D1:  CALL   032
....................    lcd_send_byte(0x01, 0b00001010); 
00D2:  MOVLW  01
00D3:  MOVWF  26
00D4:  MOVLW  0A
00D5:  MOVWF  27
00D6:  CALL   032
....................    lcd_send_byte(0x01, 0b00000000); 
00D7:  MOVLW  01
00D8:  MOVWF  26
00D9:  CLRF   27
00DA:  CALL   032
....................    lcd_send_byte(0x01, 0b00001110); 
00DB:  MOVLW  01
00DC:  MOVWF  26
00DD:  MOVLW  0E
00DE:  MOVWF  27
00DF:  CALL   032
....................    lcd_send_byte(0x01, 0b00010001); 
00E0:  MOVLW  01
00E1:  MOVWF  26
00E2:  MOVLW  11
00E3:  MOVWF  27
00E4:  CALL   032
....................    lcd_send_byte(0x01, 0b00000000); 
00E5:  MOVLW  01
00E6:  MOVWF  26
00E7:  CLRF   27
00E8:  CALL   032
00E9:  BCF    0A.3
00EA:  BCF    0A.4
00EB:  GOTO   12F (RETURN)
.................... } 
....................  
.................... void lcd_symbols3()   
.................... {  
....................    lcd_send_byte(0x02, 0x40); 
....................    lcd_send_byte(0x01, 0b00000000); 
....................    lcd_send_byte(0x01, 0b00001010); 
....................    lcd_send_byte(0x01, 0b00001010); 
....................    lcd_send_byte(0x01, 0b00000000); 
....................    lcd_send_byte(0x01, 0b00001110); 
....................    lcd_send_byte(0x01, 0b00010001); 
....................    lcd_send_byte(0x01, 0b00000000); 
.................... } 
....................  
.................... void main() 
*
0120:  MOVF   03,W
0121:  ANDLW  1F
0122:  MOVWF  03
0123:  BSF    03.5
0124:  BSF    1F.0
0125:  BSF    1F.1
0126:  BSF    1F.2
0127:  BCF    1F.3
0128:  BCF    03.7
.................... { 
....................    set_tris_b(0b00000000); 
0129:  MOVLW  00
012A:  MOVWF  06
....................     
....................    lcd_init(); 
012B:  BCF    03.5
012C:  GOTO   06D
....................    lcd_symbols1(); 
012D:  GOTO   09D
....................    lcd_symbols2(); 
012E:  GOTO   0C4
....................    //lcd_symbols3(); 
....................  
....................    //lcd_send_byte(0x00, 0x83);  
....................    //lcd_putc(0); 
....................    //lcd_putc(1); 
....................    //lcd_putc(2); 
....................     
....................    while(TRUE) 
....................    { 
....................       lcd_send_byte(0x00, 0x80);  
012F:  CLRF   26
0130:  MOVLW  80
0131:  MOVWF  27
0132:  CALL   032
....................       lcd_putc(0); 
0133:  CLRF   21
0134:  CALL   0EC
....................       delay_ms(1000); 
0135:  MOVLW  04
0136:  MOVWF  21
0137:  MOVLW  FA
0138:  MOVWF  22
0139:  CALL   00C
013A:  DECFSZ 21,F
013B:  GOTO   137
....................       lcd_send_byte(0x00, 0x80);  
013C:  CLRF   26
013D:  MOVLW  80
013E:  MOVWF  27
013F:  CALL   032
....................       lcd_putc(1); 
0140:  MOVLW  01
0141:  MOVWF  21
0142:  CALL   0EC
....................       delay_ms(1000); 
0143:  MOVLW  04
0144:  MOVWF  21
0145:  MOVLW  FA
0146:  MOVWF  22
0147:  CALL   00C
0148:  DECFSZ 21,F
0149:  GOTO   145
014A:  GOTO   12F
....................    } 
.................... } 
....................  
014B:  SLEEP
....................  

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
