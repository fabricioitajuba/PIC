D G "__PCM__" 0 78 ""5.042""
D G "__DEVICE__" 0 78 "876"
D G "__DATE__" 0 78 ""22-mar-17""
D G "__TIME__" 0 78 ""09:38:43""
D G "??0" 0 78 "" "Zilocchi Eletrônica                                ////"
c L "set_tris_a" 1 1 6 "FUNCTION"
f N "set_tris_a" 1 37 ""
v L "value" 1 37 "int8" `53 
f B "set_tris_a" 1 37 "void(int8 value)" `52 
f N "set_tris_b" 1 38 ""
v L "value" 1 38 "int8" `55 
f B "set_tris_b" 1 38 "void(int8 value)" `54 
f N "set_tris_c" 1 39 ""
v L "value" 1 39 "int8" `57 
f B "set_tris_c" 1 39 "void(int8 value)" `56 
f N "get_tris_a" 1 40 ""
f B "get_tris_a" 1 40 "int8()" `58 
f N "get_tris_b" 1 41 ""
f B "get_tris_b" 1 41 "int8()" `59 
f N "get_tris_c" 1 42 ""
f B "get_tris_c" 1 42 "int8()" `60 
f N "output_a" 1 43 ""
v L "value" 1 43 "int8" `62 
f B "output_a" 1 43 "void(int8 value)" `61 
f N "output_b" 1 44 ""
v L "value" 1 44 "int8" `64 
f B "output_b" 1 44 "void(int8 value)" `63 
f N "output_c" 1 45 ""
v L "value" 1 45 "int8" `66 
f B "output_c" 1 45 "void(int8 value)" `65 
f N "input_a" 1 46 ""
f B "input_a" 1 46 "int8()" `67 
f N "input_b" 1 47 ""
f B "input_b" 1 47 "int8()" `68 
f N "input_c" 1 48 ""
f B "input_c" 1 48 "int8()" `69 
f N "input_change_a" 1 49 ""
f B "input_change_a" 1 49 "int8()" `70 
f N "input_change_b" 1 50 ""
f B "input_change_b" 1 50 "int8()" `71 
f N "input_change_c" 1 51 ""
f B "input_change_c" 1 51 "int8()" `72 
f N "port_b_pullups" 1 52 ""
v L "value" 1 52 "int8" `74 
f B "port_b_pullups" 1 52 "void(int8 value)" `73 
f N "input" 1 53 ""
v L "pin" 1 53 "int16" `76 
f B "input" 1 53 "int8(int16 pin)" `75 
f N "input_state" 1 54 ""
v L "pin" 1 54 "int16" `78 
f B "input_state" 1 54 "int8(int16 pin)" `77 
f N "output_low" 1 55 ""
v L "pin" 1 55 "int16" `80 
f B "output_low" 1 55 "void(int16 pin)" `79 
f N "output_high" 1 56 ""
v L "pin" 1 56 "int16" `82 
f B "output_high" 1 56 "void(int16 pin)" `81 
f N "output_toggle" 1 57 ""
v L "pin" 1 57 "int16" `84 
f B "output_toggle" 1 57 "void(int16 pin)" `83 
f N "output_bit" 1 58 ""
v L "pin" 1 58 "int16" `86 
v L "level" 1 58 "int8" `87 
f B "output_bit" 1 58 "void(int16 pin,int8 level)" `85 
f N "output_float" 1 59 ""
v L "pin" 1 59 "int16" `89 
f B "output_float" 1 59 "void(int16 pin)" `88 
f N "output_drive" 1 60 ""
v L "pin" 1 60 "int16" `91 
f B "output_drive" 1 60 "void(int16 pin)" `90  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 64 "40"
d G "PIN_A1" 1 65 "41"
d G "PIN_A2" 1 66 "42"
d G "PIN_A3" 1 67 "43"
d G "PIN_A4" 1 68 "44"
d G "PIN_A5" 1 69 "45"
d G "PIN_B0" 1 71 "48"
d G "PIN_B1" 1 72 "49"
d G "PIN_B2" 1 73 "50"
d G "PIN_B3" 1 74 "51"
d G "PIN_B4" 1 75 "52"
d G "PIN_B5" 1 76 "53"
d G "PIN_B6" 1 77 "54"
d G "PIN_B7" 1 78 "55"
d G "PIN_C0" 1 80 "56"
d G "PIN_C1" 1 81 "57"
d G "PIN_C2" 1 82 "58"
d G "PIN_C3" 1 83 "59"
d G "PIN_C4" 1 84 "60"
d G "PIN_C5" 1 85 "61"
d G "PIN_C6" 1 86 "62"
d G "PIN_C7" 1 87 "63"
d G "FALSE" 1 90 "0"
d G "TRUE" 1 91 "1"
d G "BYTE" 1 93 "int8"
d G "BOOLEAN" 1 94 "int1"
d G "getc" 1 96 "getch"
d G "fgetc" 1 97 "getch"
d G "getchar" 1 98 "getch"
d G "putc" 1 99 "putchar"
d G "fputc" 1 100 "putchar"
d G "fgets" 1 101 "gets"
d G "fputs" 1 102 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
f N "restart_cause" 1 107 ""
f B "restart_cause" 1 107 "int8()" `92 
f N "reset_cpu" 1 108 ""
f B "reset_cpu" 1 108 "void()" `93 
f N "sleep" 1 109 ""
f B "sleep" 1 109 "void()" `94  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 111 "3"
d G "WDT_TIMEOUT" 1 112 "11"
d G "MCLR_FROM_SLEEP" 1 113 "19"
d G "MCLR_FROM_RUN" 1 114 "27"
d G "NORMAL_POWER_UP" 1 115 "25"
d G "BROWNOUT_RESTART" 1 116 "26"
c L "sleep" 1 1 5 "FUNCTION"
f N "setup_timer_0" 1 123 ""
v L "mode" 1 123 "int8" `96 
f B "setup_timer_0" 1 123 "void(int8 mode)" `95 
f N "set_timer0" 1 124 ""
v L "value" 1 124 "int8" `98 
f B "set_timer0" 1 124 "void(int8 value)" `97 
f N "get_timer0" 1 125 ""
f B "get_timer0" 1 125 "int8()" `99 
f N "setup_counters" 1 126 ""
v L "mode" 1 126 "int8" `101 
v L "prescaler" 1 126 "int8" `102 
f B "setup_counters" 1 126 "void(int8 mode,int8 prescaler)" `100 
f N "set_rtcc" 1 127 ""
v L "value" 1 127 "int8" `104 
f B "set_rtcc" 1 127 "void(int8 value)" `103 
f N "get_rtcc" 1 128 ""
f B "get_rtcc" 1 128 "int8()" `105  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 130 "0"
d G "T0_EXT_L_TO_H" 1 131 "32"
d G "T0_EXT_H_TO_L" 1 132 "48"
d G "T0_DIV_1" 1 134 "8"
d G "T0_DIV_2" 1 135 "0"
d G "T0_DIV_4" 1 136 "1"
d G "T0_DIV_8" 1 137 "2"
d G "T0_DIV_16" 1 138 "3"
d G "T0_DIV_32" 1 139 "4"
d G "T0_DIV_64" 1 140 "5"
d G "T0_DIV_128" 1 141 "6"
d G "T0_DIV_256" 1 142 "7"
d G "T0_8_BIT" 1 145 "0"
d G "RTCC_INTERNAL" 1 147 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 148 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 149 "48"
d G "RTCC_DIV_1" 1 150 "8"
d G "RTCC_DIV_2" 1 151 "0"
d G "RTCC_DIV_4" 1 152 "1"
d G "RTCC_DIV_8" 1 153 "2"
d G "RTCC_DIV_16" 1 154 "3"
d G "RTCC_DIV_32" 1 155 "4"
d G "RTCC_DIV_64" 1 156 "5"
d G "RTCC_DIV_128" 1 157 "6"
d G "RTCC_DIV_256" 1 158 "7"
d G "RTCC_8_BIT" 1 159 "0"
c L "get_rtcc" 1 1 8 "FUNCTION"
f N "setup_wdt" 1 170 ""
v L "mode" 1 170 "int16" `107 
f B "setup_wdt" 1 170 "void(int16 mode)" `106 
f N "restart_wdt" 1 171 ""
f B "restart_wdt" 1 171 "void()" `108  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 174 "8"
d G "WDT_36MS" 1 175 "9"
d G "WDT_72MS" 1 176 "10"
d G "WDT_144MS" 1 177 "11"
d G "WDT_288MS" 1 178 "12"
d G "WDT_576MS" 1 179 "13"
d G "WDT_1152MS" 1 180 "14"
d G "WDT_2304MS" 1 181 "15"
c L "restart_wdt" 1 1 3 "FUNCTION"
f N "setup_timer_1" 1 187 ""
v L "mode" 1 187 "int16" `110 
f B "setup_timer_1" 1 187 "void(int16 mode)" `109 
f N "get_timer1" 1 188 ""
f B "get_timer1" 1 188 "int16()" `111 
f N "set_timer1" 1 189 ""
v L "value" 1 189 "int16" `113 
f B "set_timer1" 1 189 "void(int16 value)" `112  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 192 "0"
d G "T1_INTERNAL" 1 193 "0x85"
d G "T1_EXTERNAL" 1 194 "0x87"
d G "T1_EXTERNAL_SYNC" 1 195 "0x83"
d G "T1_CLK_OUT" 1 197 "8"
d G "T1_DIV_BY_1" 1 199 "0"
d G "T1_DIV_BY_2" 1 200 "0x10"
d G "T1_DIV_BY_4" 1 201 "0x20"
d G "T1_DIV_BY_8" 1 202 "0x30"
c L "set_timer1" 1 1 3 "FUNCTION"
f N "setup_timer_2" 1 207 ""
v L "mode" 1 207 "int8" `115 
v L "period" 1 207 "int8" `116 
v L "postscale" 1 207 "int8" `117 
f B "setup_timer_2" 1 207 "void(int8 mode,int8 period,int8 postscale)" `114 
f N "get_timer2" 1 208 ""
f B "get_timer2" 1 208 "int8()" `118 
f N "set_timer2" 1 209 ""
v L "value" 1 209 "int8" `120 
f B "set_timer2" 1 209 "void(int8 value)" `119  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 211 "0"
d G "T2_DIV_BY_1" 1 212 "4"
d G "T2_DIV_BY_4" 1 213 "5"
d G "T2_DIV_BY_16" 1 214 "6"
c L "set_timer2" 1 1 4 "FUNCTION"
f N "setup_ccp1" 1 220 ""
v L "mode" 1 220 "int32" `122 
f B "setup_ccp1" 1 220 "void(int32 mode)" `121 
f N "setup_ccp1" 1 221 ""
v L "mode" 1 221 "int32" `124 
v L "pwm" 1 221 "int8" `125 
f G "setup_ccp1" 1 221 "void(int32 mode,int8 pwm)" `123 
f N "set_pwm1_duty" 1 222 ""
v L "value" 1 222 "int16" `127 
f B "set_pwm1_duty" 1 222 "void(int16 value)" `126  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 224 "0"
d G "CCP_CAPTURE_FE" 1 225 "0x04"
d G "CCP_CAPTURE_RE" 1 226 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 227 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 228 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 229 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 230 "0x09"
d G "CCP_COMPARE_INT" 1 231 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 1 232 "0x0B"
d G "CCP_PWM" 1 233 "0x0C"
d G "CCP_PWM_PLUS_1" 1 234 "0x1c"
d G "CCP_PWM_PLUS_2" 1 235 "0x2c"
d G "CCP_PWM_PLUS_3" 1 236 "0x3c"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
f N "setup_ccp2" 1 243 ""
v L "mode" 1 243 "int32" `132 
f B "setup_ccp2" 1 243 "void(int32 mode)" `131 
f N "setup_ccp2" 1 244 ""
v L "mode" 1 244 "int32" `134 
v L "pwm" 1 244 "int8" `135 
f G "setup_ccp2" 1 244 "void(int32 mode,int8 pwm)" `133 
f N "set_pwm2_duty" 1 245 ""
v L "value" 1 245 "int16" `137 
f B "set_pwm2_duty" 1 245 "void(int16 value)" `136 
c L "set_pwm2_duty" 1 1 3 "FUNCTION"
f N "setup_spi" 1 252 ""
v L "mode" 1 252 "int32" `142 
f B "setup_spi" 1 252 "void(int32 mode)" `141 
f N "spi_write" 1 253 ""
v L "value" 1 253 "int8" `144 
f B "spi_write" 1 253 "void(int8 value)" `143 
f N "spi_read" 1 254 ""
f B "spi_read" 1 254 "int8()" `145 
f N "spi_read" 1 255 ""
v L "value" 1 255 "int8" `147 
f G "spi_read" 1 255 "int8(int8 value)" `146 
f N "spi_data_in" 1 256 ""
f B "spi_data_in" 1 256 "int8()" `148  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 258 "0x00"
d G "SPI_MASTER" 1 259 "0x20"
d G "SPI_SLAVE" 1 260 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 261 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 262 "0x00"
d G "SPI_CLK_DIV_4" 1 263 "0x00"
d G "SPI_CLK_DIV_16" 1 264 "0x01"
d G "SPI_CLK_DIV_64" 1 265 "0x02"
d G "SPI_CLK_T2" 1 266 "0x03"
d G "SPI_SS_DISABLED" 1 267 "0x01"
d G "SPI_XMIT_L_TO_H" 1 269 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 270 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 272 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 273 "0x8000"
d G "SPI_L_TO_H" 1 276 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 277 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 1 2 "FUNCTION"
f N "setup_uart" 1 281 ""
v L "baud" 1 281 "int32" `150 
f B "setup_uart" 1 281 "void(int32 baud)" `149 
f N "setup_uart" 1 282 ""
v L "baud" 1 282 "int32" `152 
v L "stream" 1 282 "int8" `153 
f G "setup_uart" 1 282 "void(int32 baud,int8 stream)" `151 
f N "setup_uart" 1 283 ""
v L "baud" 1 283 "int32" `155 
v L "stream" 1 283 "int8" `156 
v L "clock" 1 283 "int32" `157 
f G "setup_uart" 1 283 "void(int32 baud,int8 stream,int32 clock)" `154 
f N "set_uart_speed" 1 284 ""
v L "baud" 1 284 "int32" `159 
f B "set_uart_speed" 1 284 "void(int32 baud)" `158 
f N "set_uart_speed" 1 285 ""
v L "baud" 1 285 "int32" `161 
v L "stream" 1 285 "int8" `162 
f G "set_uart_speed" 1 285 "void(int32 baud,int8 stream)" `160 
f N "set_uart_speed" 1 286 ""
v L "baud" 1 286 "int32" `164 
v L "stream" 1 286 "int8" `165 
v L "clock" 1 286 "int32" `166 
f G "set_uart_speed" 1 286 "void(int32 baud,int8 stream,int32 clock)" `163  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 290 "2"
d G "UART_DATA" 1 291 "4"
c L "set_uart_speed" 1 1 4 "FUNCTION"
f N "setup_adc" 1 298 ""
v L "mode" 1 298 "int16" `168 
f B "setup_adc" 1 298 "void(int16 mode)" `167 
f N "read_adc" 1 299 ""
f B "read_adc" 1 299 "int8()" `169 
f N "read_adc" 1 300 ""
v L "mode" 1 300 "int8" `171 
f G "read_adc" 1 300 "int8(int8 mode)" `170 
f N "read_adc" 1 301 ""
f G "read_adc" 1 301 "int16()" `172 
f N "read_adc" 1 302 ""
v L "mode" 1 302 "int8" `174 
f G "read_adc" 1 302 "int16(int8 mode)" `173 
f N "adc_done" 1 303 ""
f B "adc_done" 1 303 "int8()" `175  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 305 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 306 "0x100"
d G "ADC_CLOCK_DIV_8" 1 307 "0x40"
d G "ADC_CLOCK_DIV_32" 1 308 "0x80"
d G "ADC_CLOCK_INTERNAL" 1 309 "0xc0" "Internal 2-6us"
c L "adc_done" 1 1 1 "FUNCTION"
f N "setup_adc_ports" 1 312 ""
v L "setting" 1 312 "int8" `177 
f B "setup_adc_ports" 1 312 "void(int8 setting)" `176 
f N "set_analog_pins" 1 313 ""
v L "setting" 1 313 "int8" `179 
f B "set_analog_pins" 1 313 "void(int8 setting)" `178 
f N "set_adc_channel" 1 314 ""
v L "channel" 1 314 "int8" `181 
f B "set_adc_channel" 1 314 "void(int8 channel)" `180  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "NO_ANALOGS" 1 316 "7" "None"
d G "ALL_ANALOG" 1 317 "0" "A0 A1 A2 A3 A4"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 1 318 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 1 319 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 1 320 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_VREF_VREF" 1 321 "0x08" "A0 A1 A4 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 1 322 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 1 323 "0x0E" "A0"
d G "AN0_VREF_VREF" 1 324 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 1 325 "0x1" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 1 326 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 1 327 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 1 328 "0x8" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 1 329 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 1 330 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 1 331 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 1 334 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 335 "1"
d G "ADC_READ_ONLY" 1 336 "6"
c L "set_adc_channel" 1 1 3 "FUNCTION"
f N "abs" 1 342 ""
v L "x" 1 342 "sint8" `183 
f B "abs" 1 342 "sint8(sint8 x)" `182 
f N "abs" 1 343 ""
v L "x" 1 343 "sint16" `185 
f G "abs" 1 343 "sint16(sint16 x)" `184 
f N "abs" 1 344 ""
v L "x" 1 344 "sint32" `187 
f G "abs" 1 344 "sint32(sint32 x)" `186 
f N "abs" 1 345 ""
v L "x" 1 345 "float" `189 
f G "abs" 1 345 "float(float x)" `188 
f N "_mul" 1 346 ""
v L "??65535" 1 346 "int8" `191 
v L "??65535" 1 346 "int8" `192 
f B "_mul" 1 346 "int16(int8 ,int8 )" `190 
f N "_mul" 1 347 ""
v L "??65535" 1 347 "sint8" `191 
v L "??65535" 1 347 "sint8" `195 
f G "_mul" 1 347 "sint16(sint8 ,sint8 )" `193 
f N "_mul" 1 348 ""
v L "??65535" 1 348 "int16" `191 
v L "??65535" 1 348 "int16" `198 
f G "_mul" 1 348 "int32(int16 ,int16 )" `196 
f N "_mul" 1 349 ""
v L "??65535" 1 349 "sint16" `191 
v L "??65535" 1 349 "sint16" `201 
f G "_mul" 1 349 "sint32(sint16 ,sint16 )" `199  "Memory Manipulation Prototypes:"
f N "read_bank" 1 352 ""
v L "bank" 1 352 "int8" `203 
v L "offset" 1 352 "int8" `204 
f B "read_bank" 1 352 "int8(int8 bank,int8 offset)" `202 
f N "write_bank" 1 353 ""
v L "bank" 1 353 "int8" `206 
v L "offset" 1 353 "int8" `207 
v L "value" 1 353 "int8" `208 
f B "write_bank" 1 353 "void(int8 bank,int8 offset,int8 value)" `205 
f N "strcpy" 1 354 ""
v L "dest" 1 354 "*int8" `210 
v L "src" 1 354 "*int8" `211 
f B "strcpy" 1 354 "void(*int8 dest,*int8 src)" `209 
f N "memset" 1 355 ""
v L "destination" 1 355 "*int8" `213 
v L "value" 1 355 "int8" `214 
v L "num" 1 355 "int16" `215 
f B "memset" 1 355 "void(*int8 destination,int8 value,int16 num)" `212 
f N "memcpy" 1 356 ""
v L "destination" 1 356 "*int8" `217 
v L "source" 1 356 "*int8" `218 
v L "num" 1 356 "int16" `219 
f B "memcpy" 1 356 "void(*int8 destination,*int8 source,int16 num)" `216  "String Prototypes:"
f N "toupper" 1 359 ""
v L "cvalue" 1 359 "int8" `221 
f B "toupper" 1 359 "int8(int8 cvalue)" `220 
f N "tolower" 1 360 ""
v L "cvalue" 1 360 "int8" `223 
f B "tolower" 1 360 "int8(int8 cvalue)" `222 
f N "sprintf" 1 361 ""
v L "string" 1 361 "*int8" `225 
v L "cstring" 1 361 "*int8" `226 
f B "sprintf" 1 361 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `224  "Data Manipulators Prototypes:"
f N "shift_left" 1 364 ""
v L "address" 1 364 "*int8" `229 
v L "bytes" 1 364 "int8" `230 
v L "value" 1 364 "int8" `231 
f B "shift_left" 1 364 "int8(*int8 address,int8 bytes,int8 value)" `228 
f N "shift_right" 1 365 ""
v L "address" 1 365 "*int8" `233 
v L "bytes" 1 365 "int8" `234 
v L "value" 1 365 "int8" `235 
f B "shift_right" 1 365 "int8(*int8 address,int8 bytes,int8 value)" `232 
f N "rotate_left" 1 366 ""
v L "address" 1 366 "*int8" `237 
v L "bytes" 1 366 "int8" `238 
f B "rotate_left" 1 366 "void(*int8 address,int8 bytes)" `236 
f N "rotate_right" 1 367 ""
v L "address" 1 367 "*int8" `240 
v L "bytes" 1 367 "int8" `241 
f B "rotate_right" 1 367 "void(*int8 address,int8 bytes)" `239 
f N "swap" 1 368 ""
v L "value" 1 368 "int8" `243 
f B "swap" 1 368 "void(int8 value)" `242 
f N "make8" 1 369 ""
v L "var" 1 369 "int16" `245 
v L "offset" 1 369 "int8" `246 
f B "make8" 1 369 "int8(int16 var,int8 offset)" `244 
f N "make8" 1 370 ""
v L "var" 1 370 "int32" `245 
v L "offset" 1 370 "int8" `249 
f G "make8" 1 370 "int8(int32 var,int8 offset)" `247 
f N "make16" 1 371 ""
v L "varhigh" 1 371 "int8" `251 
v L "varlow" 1 371 "int8" `252 
f B "make16" 1 371 "int16(int8 varhigh,int8 varlow)" `250 
f N "make32" 1 372 ""
v L "var1" 1 372 "int16" `254 
f B "make32" 1 372 "int32(int16 var1)" `253 
f N "make32" 1 373 ""
v L "var1" 1 373 "int16" `256 
v L "var2" 1 373 "int16" `257 
f G "make32" 1 373 "int32(int16 var1,int16 var2)" `255 
f N "make32" 1 374 ""
v L "var1" 1 374 "int16" `256 
v L "var2" 1 374 "int8" `260 
f G "make32" 1 374 "int32(int16 var1,int8 var2)" `258 
f N "make32" 1 375 ""
v L "var1" 1 375 "int16" `262 
v L "var2" 1 375 "int8" `263 
v L "var3" 1 375 "int8" `264 
f G "make32" 1 375 "int32(int16 var1,int8 var2,int8 var3)" `261 
f N "make32" 1 376 ""
v L "var1" 1 376 "int8" `266 
f G "make32" 1 376 "int32(int8 var1)" `265 
f N "make32" 1 377 ""
v L "var1" 1 377 "int8" `256 
v L "var2" 1 377 "int8" `269 
f G "make32" 1 377 "int32(int8 var1,int8 var2)" `267 
f N "make32" 1 378 ""
v L "var1" 1 378 "int8" `262 
v L "var2" 1 378 "int8" `263 
v L "var3" 1 378 "int8" `273 
f G "make32" 1 378 "int32(int8 var1,int8 var2,int8 var3)" `270 
f N "make32" 1 379 ""
v L "var1" 1 379 "int8" `275 
v L "var2" 1 379 "int8" `276 
v L "var3" 1 379 "int8" `277 
v L "var4" 1 379 "int8" `278 
f G "make32" 1 379 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `274 
f N "make32" 1 380 ""
v L "var1" 1 380 "int8" `256 
v L "var2" 1 380 "int16" `281 
f G "make32" 1 380 "int32(int8 var1,int16 var2)" `279 
f N "make32" 1 381 ""
v L "var1" 1 381 "int8" `262 
v L "var2" 1 381 "int16" `263 
v L "var3" 1 381 "int8" `285 
f G "make32" 1 381 "int32(int8 var1,int16 var2,int8 var3)" `282 
f N "make32" 1 382 ""
v L "var1" 1 382 "int8" `262 
v L "var2" 1 382 "int8" `263 
v L "var3" 1 382 "int16" `289 
f G "make32" 1 382 "int32(int8 var1,int8 var2,int16 var3)" `286 
f N "bit_set" 1 383 ""
v L "var" 1 383 "int8" `291 
v L "bit" 1 383 "int8" `292 
f B "bit_set" 1 383 "void(int8 var,int8 bit)" `290 
f N "bit_set" 1 384 ""
v L "var" 1 384 "int16" `291 
v L "bit" 1 384 "int8" `295 
f G "bit_set" 1 384 "void(int16 var,int8 bit)" `293 
f N "bit_set" 1 385 ""
v L "var" 1 385 "int32" `291 
v L "bit" 1 385 "int8" `298 
f G "bit_set" 1 385 "void(int32 var,int8 bit)" `296 
f N "bit_clear" 1 386 ""
v L "var" 1 386 "int8" `300 
v L "bit" 1 386 "int8" `301 
f B "bit_clear" 1 386 "void(int8 var,int8 bit)" `299 
f N "bit_clear" 1 387 ""
v L "var" 1 387 "int16" `300 
v L "bit" 1 387 "int8" `304 
f G "bit_clear" 1 387 "void(int16 var,int8 bit)" `302 
f N "bit_clear" 1 388 ""
v L "var" 1 388 "int32" `300 
v L "bit" 1 388 "int8" `307 
f G "bit_clear" 1 388 "void(int32 var,int8 bit)" `305 
f N "bit_test" 1 389 ""
v L "var" 1 389 "int8" `309 
v L "bit" 1 389 "int8" `310 
f B "bit_test" 1 389 "int8(int8 var,int8 bit)" `308 
f N "bit_test" 1 390 ""
v L "var" 1 390 "int16" `309 
v L "bit" 1 390 "int8" `313 
f G "bit_test" 1 390 "int8(int16 var,int8 bit)" `311 
f N "bit_test" 1 391 ""
v L "var" 1 391 "int32" `309 
v L "bit" 1 391 "int8" `316 
f G "bit_test" 1 391 "int8(int32 var,int8 bit)" `314  "#use delay() Prototypes:"
f N "delay_cycles" 1 394 ""
v L "count" 1 394 "int8" `318 
f B "delay_cycles" 1 394 "void(int8 count)" `317 
f N "delay_ms" 1 395 ""
v L "time" 1 395 "int16" `320 
f B "delay_ms" 1 395 "void(int16 time)" `319 
f N "delay_us" 1 396 ""
v L "time" 1 396 "int16" `322 
f B "delay_us" 1 396 "void(int16 time)" `321  "#use rs232() Prototypes:"
f N "putchar" 1 399 ""
v L "cdata" 1 399 "int8" `324 
f B "putchar" 1 399 "void(int8 cdata)" `323 
f N "putchar" 1 400 ""
v L "cdata" 1 400 "int8" `326 
v L "stream" 1 400 "int8" `327 
f G "putchar" 1 400 "void(int8 cdata,int8 stream)" `325 
f N "puts" 1 401 ""
v L "string" 1 401 "*int8" `329 
f B "puts" 1 401 "void(*int8 string)" `328 
f N "puts" 1 402 ""
v L "string" 1 402 "*int8" `331 
v L "stream" 1 402 "int8" `332 
f G "puts" 1 402 "void(*int8 string,int8 stream)" `330 
f N "getch" 1 403 ""
f B "getch" 1 403 "int8()" `333 
f N "getch" 1 404 ""
v L "stream" 1 404 "int8" `335 
f G "getch" 1 404 "int8(int8 stream)" `334 
f N "gets" 1 405 ""
v L "string" 1 405 "*int8" `337 
f B "gets" 1 405 "void(*int8 string)" `336 
f N "gets" 1 406 ""
v L "string" 1 406 "*int8" `339 
v L "stream" 1 406 "int8" `340 
f G "gets" 1 406 "void(*int8 string,int8 stream)" `338 
f N "kbhit" 1 407 ""
f B "kbhit" 1 407 "int8()" `341 
f N "kbhit" 1 408 ""
v L "stream" 1 408 "int8" `343 
f G "kbhit" 1 408 "int8(int8 stream)" `342 
f N "printf" 1 409 ""
v L "string" 1 409 "*int8" `345 
f B "printf" 1 409 "void(*int8 string,*int8 _VA_LIST)" `344 
f N "fprintf" 1 410 ""
v L "stream" 1 410 "int8" `348 
v L "string" 1 410 "*int8" `349 
f B "fprintf" 1 410 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `347 
f N "putc_send" 1 411 ""
f B "putc_send" 1 411 "void()" `351 
f N "fputc_send" 1 412 ""
v L "stream" 1 412 "int8" `353 
f B "fputc_send" 1 412 "void(int8 stream)" `352 
f N "rcv_buffer_full" 1 413 ""
f B "rcv_buffer_full" 1 413 "int8()" `354 
f N "rcv_buffer_full" 1 414 ""
v L "stream" 1 414 "int8" `356 
f G "rcv_buffer_full" 1 414 "int8(int8 stream)" `355 
f N "rcv_buffer_bytes" 1 415 ""
f B "rcv_buffer_bytes" 1 415 "int16()" `357 
f N "rcv_buffer_bytes" 1 416 ""
v L "stream" 1 416 "int8" `359 
f G "rcv_buffer_bytes" 1 416 "int16(int8 stream)" `358 
f N "tx_buffer_full" 1 417 ""
f B "tx_buffer_full" 1 417 "int8()" `360 
f N "tx_buffer_full" 1 418 ""
v L "stream" 1 418 "int8" `362 
f G "tx_buffer_full" 1 418 "int8(int8 stream)" `361 
f N "tx_buffer_bytes" 1 419 ""
f B "tx_buffer_bytes" 1 419 "int16()" `363 
f N "tx_buffer_bytes" 1 420 ""
v L "stream" 1 420 "int8" `365 
f G "tx_buffer_bytes" 1 420 "int16(int8 stream)" `364  "#use i2c() Prototypes:"
f N "i2c_read" 1 423 ""
f B "i2c_read" 1 423 "int8()" `366 
f N "i2c_read" 1 424 ""
v L "stream" 1 424 "int8" `368 
f G "i2c_read" 1 424 "int8(int8 stream)" `367 
f N "i2c_read" 1 425 ""
v L "stream" 1 425 "int8" `370 
v L "ack" 1 425 "int8" `371 
f G "i2c_read" 1 425 "int8(int8 stream,int8 ack)" `369 
f N "i2c_write" 1 426 ""
v L "data" 1 426 "int8" `373 
f B "i2c_write" 1 426 "int8(int8 data)" `372 
f N "i2c_write" 1 427 ""
v L "stream" 1 427 "int8" `375 
v L "data" 1 427 "int8" `376 
f G "i2c_write" 1 427 "int8(int8 stream,int8 data)" `374 
f N "i2c_start" 1 428 ""
f B "i2c_start" 1 428 "void()" `377 
f N "i2c_start" 1 429 ""
v L "stream" 1 429 "int8" `379 
f G "i2c_start" 1 429 "void(int8 stream)" `378 
f N "i2c_start" 1 430 ""
v L "stream" 1 430 "int8" `381 
v L "restart" 1 430 "int8" `382 
f G "i2c_start" 1 430 "void(int8 stream,int8 restart)" `380 
f N "i2c_stop" 1 431 ""
f B "i2c_stop" 1 431 "void()" `383 
f N "i2c_stop" 1 432 ""
v L "stream" 1 432 "int8" `385 
f G "i2c_stop" 1 432 "void(int8 stream)" `384 
f N "i2c_isr_state" 1 433 ""
f B "i2c_isr_state" 1 433 "int8()" `386 
f N "i2c_slaveaddr" 1 434 ""
v L "addr" 1 434 "int8" `388 
f B "i2c_slaveaddr" 1 434 "void(int8 addr)" `387 
f N "i2c_slaveaddr" 1 435 ""
v L "stream" 1 435 "int8" `390 
v L "addr" 1 435 "int8" `391 
f G "i2c_slaveaddr" 1 435 "void(int8 stream,int8 addr)" `389 
f N "i2c_poll" 1 436 ""
f B "i2c_poll" 1 436 "int8()" `392 
f N "i2c_poll" 1 437 ""
v L "stream" 1 437 "int8" `394 
f G "i2c_poll" 1 437 "int8(int8 stream)" `393 
f N "i2c_init" 1 438 ""
v L "baud" 1 438 "int32" `396 
f B "i2c_init" 1 438 "void(int32 baud)" `395 
f N "i2c_init" 1 439 ""
v L "stream" 1 439 "int8" `398 
v L "baud" 1 439 "int32" `399 
f G "i2c_init" 1 439 "void(int8 stream,int32 baud)" `397  "#use spi() Prototypes:"
f N "spi_xfer" 1 442 ""
f B "spi_xfer" 1 442 "int8()" `400 
f N "spi_xfer" 1 443 ""
f G "spi_xfer" 1 443 "int16()" `401 
f N "spi_xfer" 1 444 ""
f G "spi_xfer" 1 444 "int32()" `402 
f N "spi_xfer" 1 445 ""
v L "data" 1 445 "int8" `404 
f G "spi_xfer" 1 445 "int8(int8 data)" `403 
f N "spi_xfer" 1 446 ""
v L "data" 1 446 "int16" `406 
f G "spi_xfer" 1 446 "int16(int16 data)" `405 
f N "spi_xfer" 1 447 ""
v L "data" 1 447 "int32" `408 
f G "spi_xfer" 1 447 "int32(int32 data)" `407 
f N "spi_xfer" 1 448 ""
v L "stream" 1 448 "int8" `410 
v L "data" 1 448 "int8" `411 
f G "spi_xfer" 1 448 "int8(int8 stream,int8 data)" `409 
f N "spi_xfer" 1 449 ""
v L "stream" 1 449 "int8" `410 
v L "data" 1 449 "int16" `414 
f G "spi_xfer" 1 449 "int16(int8 stream,int16 data)" `412 
f N "spi_xfer" 1 450 ""
v L "stream" 1 450 "int8" `410 
v L "data" 1 450 "int32" `417 
f G "spi_xfer" 1 450 "int32(int8 stream,int32 data)" `415 
f N "spi_xfer" 1 451 ""
v L "stream" 1 451 "int8" `419 
v L "data" 1 451 "int8" `420 
v L "bits" 1 451 "int8" `421 
f G "spi_xfer" 1 451 "int8(int8 stream,int8 data,int8 bits)" `418 
f N "spi_xfer" 1 452 ""
v L "stream" 1 452 "int8" `419 
v L "data" 1 452 "int16" `420 
v L "bits" 1 452 "int8" `425 
f G "spi_xfer" 1 452 "int16(int8 stream,int16 data,int8 bits)" `422 
f N "spi_xfer" 1 453 ""
v L "stream" 1 453 "int8" `419 
v L "data" 1 453 "int32" `420 
v L "bits" 1 453 "int8" `429 
f G "spi_xfer" 1 453 "int32(int8 stream,int32 data,int8 bits)" `426 
f N "spi_init" 1 454 ""
v L "baud" 1 454 "int32" `431 
f B "spi_init" 1 454 "void(int32 baud)" `430 
f N "spi_init" 1 455 ""
v L "stream" 1 455 "int8" `433 
v L "baud" 1 455 "int32" `434 
f G "spi_init" 1 455 "void(int8 stream,int32 baud)" `432 
f N "spi_speed" 1 456 ""
v L "baud" 1 456 "int32" `436 
f B "spi_speed" 1 456 "void(int32 baud)" `435 
f N "spi_speed" 1 457 ""
v L "stream" 1 457 "int8" `438 
v L "baud" 1 457 "int32" `439 
f G "spi_speed" 1 457 "void(int8 stream,int32 baud)" `437 
f N "spi_speed" 1 458 ""
v L "stream" 1 458 "int8" `441 
v L "baud" 1 458 "int32" `442 
v L "clock" 1 458 "int32" `443 
f G "spi_speed" 1 458 "void(int8 stream,int32 baud,int32 clock)" `440 
f N "spi_prewrite" 1 459 ""
v L "data" 1 459 "int8" `445 
f B "spi_prewrite" 1 459 "void(int8 data)" `444 
f N "spi_prewrite" 1 460 ""
v L "data" 1 460 "int16" `447 
f G "spi_prewrite" 1 460 "void(int16 data)" `446 
f N "spi_prewrite" 1 461 ""
v L "data" 1 461 "int32" `449 
f G "spi_prewrite" 1 461 "void(int32 data)" `448 
f N "spi_prewrite" 1 462 ""
v L "??65535" 1 462 "int8" `451 
v L "data" 1 462 "int8" `452 
f G "spi_prewrite" 1 462 "void(int8 ,int8 data)" `450 
f N "spi_prewrite" 1 463 ""
v L "??65535" 1 463 "int8" `451 
v L "data" 1 463 "int16" `455 
f G "spi_prewrite" 1 463 "void(int8 ,int16 data)" `453 
f N "spi_prewrite" 1 464 ""
v L "??65535" 1 464 "int8" `451 
v L "data" 1 464 "int32" `458 
f G "spi_prewrite" 1 464 "void(int8 ,int32 data)" `456 
f N "spi_xfer_in" 1 465 ""
f B "spi_xfer_in" 1 465 "int8()" `459 
f N "spi_xfer_in" 1 466 ""
f G "spi_xfer_in" 1 466 "int16()" `460 
f N "spi_xfer_in" 1 467 ""
f G "spi_xfer_in" 1 467 "int32()" `461 
f N "spi_xfer_in" 1 468 ""
v L "bits" 1 468 "int8" `463 
f G "spi_xfer_in" 1 468 "int8(int8 bits)" `462 
f N "spi_xfer_in" 1 469 ""
v L "bits" 1 469 "int8" `465 
f G "spi_xfer_in" 1 469 "int16(int8 bits)" `464 
f N "spi_xfer_in" 1 470 ""
v L "bits" 1 470 "int8" `467 
f G "spi_xfer_in" 1 470 "int32(int8 bits)" `466 
f N "spi_xfer_in" 1 471 ""
v L "stream" 1 471 "int8" `469 
v L "bits" 1 471 "int8" `470 
f G "spi_xfer_in" 1 471 "int8(int8 stream,int8 bits)" `468 
f N "spi_xfer_in" 1 472 ""
v L "stream" 1 472 "int8" `469 
v L "bits" 1 472 "int8" `473 
f G "spi_xfer_in" 1 472 "int16(int8 stream,int8 bits)" `471 
f N "spi_xfer_in" 1 473 ""
v L "stream" 1 473 "int8" `469 
v L "bits" 1 473 "int8" `476 
f G "spi_xfer_in" 1 473 "int32(int8 stream,int8 bits)" `474  "#use rtos() Prototypes:"
f N "rtos_run" 1 476 ""
f B "rtos_run" 1 476 "void()" `477 
f N "rtos_yield" 1 477 ""
f B "rtos_yield" 1 477 "void()" `478 
f N "rtos_enable" 1 478 ""
v L "task" 1 478 "int8" `480 
f B "rtos_enable" 1 478 "void(int8 task)" `479 
f N "rtos_disable" 1 479 ""
v L "task" 1 479 "int8" `482 
f B "rtos_disable" 1 479 "void(int8 task)" `481 
f N "rtos_terminate" 1 480 ""
f B "rtos_terminate" 1 480 "void()" `483 
f N "rtos_await" 1 481 ""
v L "flag" 1 481 "int8" `485 
f B "rtos_await" 1 481 "void(int8 flag)" `484 
f N "rtos_wait" 1 482 ""
v L "sem" 1 482 "int8" `487 
f B "rtos_wait" 1 482 "void(int8 sem)" `486 
f N "rtos_signal" 1 483 ""
v L "sem" 1 483 "int8" `489 
f B "rtos_signal" 1 483 "void(int8 sem)" `488 
f N "rtos_msg_send" 1 484 ""
v L "task" 1 484 "int8" `491 
v L "msg" 1 484 "int8" `492 
f B "rtos_msg_send" 1 484 "void(int8 task,int8 msg)" `490 
f N "rtos_msg_read" 1 485 ""
f B "rtos_msg_read" 1 485 "int8()" `493 
f N "rtos_msg_poll" 1 486 ""
f B "rtos_msg_poll" 1 486 "int8()" `494 
f N "rtos_overrun" 1 487 ""
v L "task" 1 487 "int8" `496 
f B "rtos_overrun" 1 487 "int8(int8 task)" `495 
f N "rtos_stats" 1 488 ""
v L "task" 1 488 "int8" `498 
v L "stat" 1 488 "*int8" `499 
f B "rtos_stats" 1 488 "void(int8 task,*int8 stat)" `497  "#use timer() Prototypes:"
f N "get_ticks" 1 491 ""
f B "get_ticks" 1 491 "int8()" `500 
f N "get_ticks" 1 492 ""
f G "get_ticks" 1 492 "int16()" `501 
f N "get_ticks" 1 493 ""
f G "get_ticks" 1 493 "int32()" `502 
f N "get_ticks" 1 494 ""
v L "stream" 1 494 "int8" `504 
f G "get_ticks" 1 494 "int8(int8 stream)" `503 
f N "get_ticks" 1 495 ""
v L "stream" 1 495 "int8" `506 
f G "get_ticks" 1 495 "int16(int8 stream)" `505 
f N "get_ticks" 1 496 ""
v L "stream" 1 496 "int8" `508 
f G "get_ticks" 1 496 "int32(int8 stream)" `507 
f N "set_ticks" 1 497 ""
v L "value" 1 497 "int8" `510 
f B "set_ticks" 1 497 "void(int8 value)" `509 
f N "set_ticks" 1 498 ""
v L "value" 1 498 "int16" `512 
f G "set_ticks" 1 498 "void(int16 value)" `511 
f N "set_ticks" 1 499 ""
v L "value" 1 499 "int32" `514 
f G "set_ticks" 1 499 "void(int32 value)" `513 
f N "set_ticks" 1 500 ""
v L "stream" 1 500 "int8" `516 
v L "value" 1 500 "int8" `517 
f G "set_ticks" 1 500 "void(int8 stream,int8 value)" `515 
f N "set_ticks" 1 501 ""
v L "stream" 1 501 "int8" `516 
v L "value" 1 501 "int16" `520 
f G "set_ticks" 1 501 "void(int8 stream,int16 value)" `518 
f N "set_ticks" 1 502 ""
v L "stream" 1 502 "int8" `516 
v L "value" 1 502 "int32" `523 
f G "set_ticks" 1 502 "void(int8 stream,int32 value)" `521  "#use pwm() Prototypes:"
f N "pwm_on" 1 505 ""
f B "pwm_on" 1 505 "void()" `524 
f N "pwm_on" 1 506 ""
v L "stream" 1 506 "int8" `526 
f G "pwm_on" 1 506 "void(int8 stream)" `525 
f N "pwm_off" 1 507 ""
f B "pwm_off" 1 507 "void()" `527 
f N "pwm_off" 1 508 ""
v L "stream" 1 508 "int8" `529 
f G "pwm_off" 1 508 "void(int8 stream)" `528 
f N "pwm_set_duty" 1 509 ""
v L "duty" 1 509 "int16" `531 
f B "pwm_set_duty" 1 509 "void(int16 duty)" `530 
f N "pwm_set_duty" 1 510 ""
v L "stream" 1 510 "int8" `533 
v L "duty" 1 510 "int16" `534 
f G "pwm_set_duty" 1 510 "void(int8 stream,int16 duty)" `532 
f N "pwm_set_duty_percent" 1 511 ""
v L "percent" 1 511 "int16" `536 
f B "pwm_set_duty_percent" 1 511 "void(int16 percent)" `535 
f N "pwm_set_duty_percent" 1 512 ""
v L "stream" 1 512 "int8" `538 
v L "percent" 1 512 "int16" `539 
f G "pwm_set_duty_percent" 1 512 "void(int8 stream,int16 percent)" `537 
f N "pwm_set_frequency" 1 513 ""
v L "frequency" 1 513 "int32" `541 
f B "pwm_set_frequency" 1 513 "void(int32 frequency)" `540 
f N "pwm_set_frequency" 1 514 ""
v L "stream" 1 514 "int8" `543 
v L "frequency" 1 514 "int32" `544 
f G "pwm_set_frequency" 1 514 "void(int8 stream,int32 frequency)" `542  "#use capture() Prototypes:"
f N "get_capture_time" 1 517 ""
f B "get_capture_time" 1 517 "int16()" `545 
f N "get_capture_time" 1 518 ""
v L "stream" 1 518 "int8" `547 
f G "get_capture_time" 1 518 "int16(int8 stream)" `546 
f N "get_capture_event" 1 519 ""
f B "get_capture_event" 1 519 "int8()" `548 
f N "get_capture_event" 1 520 ""
v L "stream" 1 520 "int8" `550 
f G "get_capture_event" 1 520 "int8(int8 stream)" `549  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
f N "goto_address" 1 533 ""
v L "address" 1 533 "int16" `552 
f B "goto_address" 1 533 "void(int16 address)" `551 
f N "label_address" 1 534 ""
v L "label" 1 534 "int16" `554 
f B "label_address" 1 534 "int16(int16 label)" `553  "Program Memory Prototypes:"
f N "read_program_memory" 1 537 ""
v L "address" 1 537 "int16" `556 
v L "dataptr" 1 537 "*int8" `557 
v L "count" 1 537 "int16" `558 
f B "read_program_memory" 1 537 "void(int16 address,*int8 dataptr,int16 count)" `555 
f N "read_program_eeprom" 1 538 ""
v L "address" 1 538 "int16" `560 
f B "read_program_eeprom" 1 538 "int16(int16 address)" `559 
f N "write_program_memory" 1 539 ""
v L "address" 1 539 "int16" `562 
v L "dataptr" 1 539 "*int8" `563 
v L "count" 1 539 "int16" `564 
f B "write_program_memory" 1 539 "void(int16 address,*int8 dataptr,int16 count)" `561 
f N "write_program_eeprom" 1 540 ""
v L "address" 1 540 "int16" `566 
v L "data" 1 540 "int16" `567 
f B "write_program_eeprom" 1 540 "void(int16 address,int16 data)" `565  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 545 "int16" `568 
f N "read_eeprom" 1 550 ""
v L "address" 1 550 "__EEADDRESS__" `570 
f B "read_eeprom" 1 550 "int8(__EEADDRESS__ address)" `569 
f N "write_eeprom" 1 551 ""
v L "address" 1 551 "__EEADDRESS__" `572 
v L "value" 1 551 "int8" `573 
f B "write_eeprom" 1 551 "void(__EEADDRESS__ address,int8 value)" `571  "INT"
c L "write_eeprom" 1 1 4 "FUNCTION"
f N "enable_interrupts" 1 558 ""
v L "interrupt" 1 558 "int32" `575 
f B "enable_interrupts" 1 558 "void(int32 interrupt)" `574 
f N "disable_interrupts" 1 559 ""
v L "interrupt" 1 559 "int32" `577 
f B "disable_interrupts" 1 559 "void(int32 interrupt)" `576 
f N "clear_interrupt" 1 560 ""
v L "interrupt" 1 560 "int32" `579 
f B "clear_interrupt" 1 560 "void(int32 interrupt)" `578 
f N "interrupt_active" 1 561 ""
v L "interrupt" 1 561 "int32" `581 
f B "interrupt_active" 1 561 "int8(int32 interrupt)" `580 
f N "interrupt_enabled" 1 562 ""
v L "interrupt" 1 562 "int32" `583 
f B "interrupt_enabled" 1 562 "int8(int32 interrupt)" `582 
f N "ext_int_edge" 1 563 ""
v L "source" 1 563 "int8" `585 
v L "edge" 1 563 "int8" `586 
f B "ext_int_edge" 1 563 "void(int8 source,int8 edge)" `584 
f N "jump_to_isr" 1 564 ""
v L "address" 1 564 "int16" `588 
f B "jump_to_isr" 1 564 "void(int16 address)" `587  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 566 "0x40"
d G "H_TO_L" 1 567 "0"
d G "GLOBAL" 1 569 "0x0BC0"
d G "PERIPH" 1 570 "0x0B40"
d G "INT_RTCC" 1 571 "0x000B20"
d G "INT_RB" 1 572 "0x00FF0B08"
d G "INT_EXT_L2H" 1 573 "0x50000B10"
d G "INT_EXT_H2L" 1 574 "0x60000B10"
d G "INT_EXT" 1 575 "0x000B10"
d G "INT_AD" 1 576 "0x008C40"
d G "INT_TBE" 1 577 "0x008C10"
d G "INT_RDA" 1 578 "0x008C20"
d G "INT_TIMER1" 1 579 "0x008C01"
d G "INT_TIMER2" 1 580 "0x008C02"
d G "INT_CCP1" 1 581 "0x008C04"
d G "INT_CCP2" 1 582 "0x008D01"
d G "INT_SSP" 1 583 "0x008C08"
d G "INT_BUSCOL" 1 584 "0x008D08"
d G "INT_EEPROM" 1 585 "0x008D10"
d G "INT_TIMER0" 1 586 "0x000B20"
C L "jump_to_isr" 2 2 59 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 2 "FUNCTION"
T G "LCD_PIN_MAP" 2 74 "{int1 enable,int1 rs,int1 rw,int1 unused,int4 data}" `599  "this is to improve compatability with previous LCD drivers that accepted"
D G "LCD_DATA_PORT" 2 79 "getenv("SFR:PORTB")"
D G "lcd_output_enable" 2 93 "(x) lcdlat.enable=x"
D G "lcd_enable_tris" 2 94 "()   lcdtris.enable=0"
D G "lcd_output_rs" 2 101 "(x) lcdlat.rs=x"
D G "lcd_rs_tris" 2 102 "()   lcdtris.rs=0"
D G "lcd_output_rw" 2 109 "(x) lcdlat.rw=x"
D G "lcd_rw_tris" 2 110 "()   lcdtris.rw=0"
V G "lcd" 2 145 "LCD_PIN_MAP" `600 
V G "lcdlat" 2 145 "LCD_PIN_MAP" `601 
V G "lcdtris" 2 145 "LCD_PIN_MAP" `602 
D G "LCD_TYPE" 2 163 "2" "0=5x7, 1=5x10, 2=2 lines"
D G "LCD_LINE_TWO" 2 167 "0x40" "LCD RAM address for the second line"
V G "LCD_INIT_STRING" 2 170 "[4]" `604 
C L "jump_to_isr" 2 2 2 "FUNCTION"
F N "lcd_read_nibble" 2 174 ""
f G "lcd_read_nibble" 2 174 "int8()" `606 
F N "lcd_read_byte" 2 176 ""
F G "lcd_read_byte" 2 177 "int8()" `607 
V L "low" 2 178 "int8" `608 
V L "high" 2 178 "int8" `609 
F N "lcd_read_nibble" 2 223 ""
F G "lcd_read_nibble" 2 224 "int8()" `606 
F N "lcd_send_nibble" 2 240 ""
V L "n" 2 240 "int8" `611 
F G "lcd_send_nibble" 2 241 "void(int8 n)" `610 
F N "lcd_send_byte" 2 258 ""
V L "address" 2 258 "int8" `613 
V L "n" 2 258 "int8" `614 
F G "lcd_send_byte" 2 259 "void(int8 address,int8 n)" `612 
F N "lcd_init" 2 271 ""
F G "lcd_init" 2 272 "void()" `615 
V L "i" 2 273 "int8" `616 
F N "lcd_gotoxy" 2 307 ""
V L "x" 2 307 "int8" `618 
V L "y" 2 307 "int8" `619 
F G "lcd_gotoxy" 2 308 "void(int8 x,int8 y)" `617 
V L "address" 2 309 "int8" `620 
F N "lcd_putc" 2 320 ""
V L "c" 2 320 "int8" `622 
F G "lcd_putc" 2 321 "void(int8 c)" `621 
F N "lcd_getc" 2 336 ""
V L "x" 2 336 "int8" `624 
V L "y" 2 336 "int8" `625 
F G "lcd_getc" 2 337 "int8(int8 x,int8 y)" `623 
V L "value" 2 338 "int8" `626 
C L "lcd_getc" 2 2 1 "FUNCTION"
F N "lcd_symbols1" 0 15 ""
F G "lcd_symbols1" 0 16 "void()" `627 
F N "lcd_symbols2" 0 27 ""
F G "lcd_symbols2" 0 28 "void()" `628 
F N "lcd_symbols3" 0 39 ""
F G "lcd_symbols3" 0 40 "void()" `629 
F N "MAIN" 0 51 ""
F G "MAIN" 0 52 "void()" `630 
C L "MAIN" 0 58 5 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
