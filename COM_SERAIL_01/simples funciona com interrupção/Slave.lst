CCS PCM C Compiler, Version 5.015, 5967               16-jan-15 09:29

               Filename:   D:\Informações\Projetos\COM_SERAIL_01\Slave.lst

               ROM used:   149 words (7%)
                           Largest free fragment is 1899
               RAM used:   15 (7%) at main() level
                           17 (8%) worst case
               Stack used: 2 locations (1 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   05D
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  MOVLW  8C
001B:  MOVWF  04
001C:  BTFSS  00.5
001D:  GOTO   020
001E:  BTFSC  0C.5
001F:  GOTO   031
0020:  MOVF   22,W
0021:  MOVWF  04
0022:  MOVF   23,W
0023:  MOVWF  77
0024:  MOVF   24,W
0025:  MOVWF  78
0026:  MOVF   25,W
0027:  MOVWF  79
0028:  MOVF   26,W
0029:  MOVWF  7A
002A:  MOVF   27,W
002B:  MOVWF  0A
002C:  SWAPF  21,W
002D:  MOVWF  03
002E:  SWAPF  7F,F
002F:  SWAPF  7F,W
0030:  RETFIE
.................... #include <16f628A.h> 
.................... //////////// Standard Header file for the PIC16F628A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F628A 
....................  
.................... #list 
....................  
.................... #use delay(clock=4000000) 
*
0048:  MOVLW  2A
0049:  MOVWF  04
004A:  BCF    03.7
004B:  MOVF   00,W
004C:  BTFSC  03.2
004D:  GOTO   05C
004E:  MOVLW  01
004F:  MOVWF  78
0050:  CLRF   77
0051:  DECFSZ 77,F
0052:  GOTO   051
0053:  DECFSZ 78,F
0054:  GOTO   050
0055:  MOVLW  4A
0056:  MOVWF  77
0057:  DECFSZ 77,F
0058:  GOTO   057
0059:  GOTO   05A
005A:  DECFSZ 00,F
005B:  GOTO   04E
005C:  RETURN
.................... #fuses HS,NOWDT,PROTECT,NOLVP 
.................... #use rs232(baud=9600, xmit=PIN_B2,rcv=PIN_B1) 
.................... #include <regs_16f87x.h> 
.................... #include <regs_16.h> 
.................... // Este arquivo contém as definições dos registradores SFR comuns a série 16 
....................  
.................... #BYTE INDF		= 0x00 
.................... #BYTE TMR0		= 0x01 
.................... #BYTE PCL		= 0x02 
.................... #BYTE STATUS		= 0x03 
.................... 	#BIT IRP	= STATUS.7 
.................... 	#BIT RP1	= STATUS.6 
.................... 	#BIT RP0	= STATUS.5 
.................... 	#BIT TO		= STATUS.4 
.................... 	#BIT PD		= STATUS.3 
.................... 	#BIT Z		= STATUS.2 
.................... 	#BIT DC		= STATUS.1 
.................... 	#BIT C		= STATUS.0 
.................... #BYTE FSR		= 0x04 
.................... #BYTE PORTA		= 0x05 
.................... #BYTE PORTB		= 0x06 
.................... #BYTE PORTC		= 0x07 
.................... #BYTE PORTD		= 0x08 
.................... #BYTE PORTE		= 0x09 
.................... #BYTE PCLATH		= 0x0A 
.................... #BYTE INTCON		= 0x0B 
.................... 	#BIT GIE	= INTCON.7 
.................... 	#BIT PEIE	= INTCON.6 
.................... 	#BIT TMR0IE 	= INTCON.5 
.................... 	#BIT T0IE	= INTCON.5 
.................... 	#BIT INTE	= INTCON.4 
.................... 	#BIT RBIE	= INTCON.3 
.................... 	#BIT TMR0IF 	= INTCON.2 
.................... 	#BIT T0IF	= INTCON.2 
.................... 	#BIT INTF	= INTCON.1 
.................... 	#BIT RBIF	= INTCON.0 
.................... #BYTE PIR1		= 0x0C 
.................... #BYTE PIR2		= 0x0D 
.................... #BYTE TMR1L		= 0x0E 
.................... #BYTE TMR1H		= 0x0F 
.................... #BYTE T1CON		= 0x10 
.................... 	#BIT T1CKPS1	= T1CON.5 
.................... 	#BIT T1CKPS0	= T1CON.4 
.................... 	#BIT T1OSCEN	= T1CON.3 
.................... 	#BIT T1SYNC	= T1CON.2 
.................... 	#BIT TMR1CS	= T1CON.1 
.................... 	#BIT TMR1ON	= T1CON.0 
.................... #BYTE TMR2		= 0x11 
.................... #BYTE T2CON		= 0x12 
.................... 	#BIT TOUTPS3	= T2CON.6 
.................... 	#BIT TOUTPS2	= T2CON.5 
.................... 	#BIT TOUTPS1	= T2CON.4 
.................... 	#BIT TOUTPS0	= T2CON.3 
.................... 	#BIT TMR2ON	= T2CON.2 
.................... 	#BIT T2CKPS1	= T2CON.1 
.................... 	#BIT T2CKPS0	= T2CON.0 
.................... #BYTE CCPR1L		= 0x15 
.................... #BYTE CCPR1H		= 0x16 
.................... #BYTE CCP1CON		= 0x17 
.................... 	#BIT CCP1X	= CCP1CON.5 
.................... 	#BIT CCP1Y	= CCP1CON.4 
.................... 	#BIT CCP1M3	= CCP1CON.3 
.................... 	#BIT CCP1M2	= CCP1CON.2 
.................... 	#BIT CCP1M1	= CCP1CON.1 
.................... 	#BIT CCP1M0	= CCP1CON.0 
.................... #BYTE CCPR2L		= 0x1B 
.................... #BYTE CCPR2H		= 0x1C 
.................... #BYTE CCP2CON		= 0x1D 
.................... 	#BIT CCP2X	= CCP2CON.5 
.................... 	#BIT CCP2Y	= CCP2CON.4 
.................... 	#BIT CCP2M3	= CCP2CON.3 
.................... 	#BIT CCP2M2	= CCP2CON.2 
.................... 	#BIT CCP2M1	= CCP2CON.1 
.................... 	#BIT CCP2M0	= CCP2CON.0 
.................... #BYTE OPTION		= 0x81 
.................... 	#BIT RBPU	= OPTION.7 
.................... 	#BIT INTEDG 	= OPTION.6 
.................... 	#BIT T0CS	= OPTION.5 
.................... 	#BIT T0SE	= OPTION.4 
.................... 	#BIT PSA	= OPTION.3 
.................... 	#BIT PS2	= OPTION.2 
.................... 	#BIT PS1	= OPTION.1 
.................... 	#BIT PS0	= OPTION.0 
.................... #BYTE TRISA		= 0x85 
.................... #BYTE TRISB		= 0x86 
.................... #BYTE TRISC		= 0x87 
.................... #BYTE TRISD		= 0x88 
.................... #BYTE TRISE		= 0x89 
.................... 	#BIT IBF	= TRISE.7 
.................... 	#BIT OBF	= TRISE.6 
.................... 	#BIT IBOV	= TRISE.5 
.................... 	#BIT PSPMODE	= TRISE.4 
.................... #BYTE PCON		= 0x8E 
.................... 	#BIT OSCF	= PCON.3 
.................... 	#BIT POR	= PCON.1 
.................... 	#BIT BOD	= PCON.0 
.................... #BYTE PIE1		= 0x8C 
.................... #BYTE PIE2		= 0x8D 
.................... #BYTE OSCCAL		= 0x90 
.................... #BYTE PR2		= 0x92 
.................... #BYTE WPU		= 0x95 
.................... #BYTE IOCB		= 0x96 
....................  
....................  
.................... // definições válidas para os PICs da série 16F87x e 16F87xA 
.................... // Autor: Fábio Pereira 
....................  
.................... // PIR1 
.................... 	#BIT PSPIF	= PIR1.7 
.................... 	#BIT ADIF	= PIR1.6 
.................... 	#BIT RCIF	= PIR1.5 
.................... 	#BIT TXIF	= PIR1.4 
.................... 	#BIT SSPIF	= PIR1.3 
.................... 	#BIT CCP1IF	= PIR1.2 
.................... 	#BIT TMR2IF	= PIR1.1 
.................... 	#BIT TMR1IF	= PIR1.0 
.................... // PIR2 
.................... 	#BIT CMIF	= PIR2.6 
.................... 	#BIT EEIF	= PIR2.4 
.................... 	#BIT BCLIF	= PIR2.3 
.................... 	#BIT CCP2IF	= PIR2.0 
.................... #BYTE SSPBUF		= 0x13 
.................... #BYTE SSPCON		= 0x14 
.................... 	#BIT WCOL	= SSPCON.7 
.................... 	#BIT SSPOV	= SSPCON.6 
.................... 	#BIT SSPEN	= SSPCON.5 
.................... 	#BIT CKP	= SSPCON.4 
.................... 	#BIT SSPM3	= SSPCON.3 
.................... 	#BIT SSPM2	= SSPCON.2 
.................... 	#BIT SSPM1	= SSPCON.1 
.................... 	#BIT SSPM0	= SSPCON.0 
.................... #BYTE RCSTA		= 0x18 
.................... 	#BIT SPEN	= RCSTA.7 
.................... 	#BIT RX9	= RCSTA.6 
.................... 	#BIT SREN	= RCSTA.5 
.................... 	#BIT CREN	= RCSTA.4 
.................... 	#BIT ADDEN	= RCSTA.3 
.................... 	#BIT FERR	= RCSTA.2 
.................... 	#BIT OERR	= RCSTA.1 
.................... 	#BIT RX9D	= RCSTA.0 
.................... #BYTE TXREG		= 0x19 
.................... #BYTE RCREG		= 0x1A 
.................... #BYTE ADRESH		= 0x1E 
.................... #BYTE ADCON0		= 0x1F 
.................... 	#BIT ADCS1	= ADCON0.7 
.................... 	#BIT ADCS0	= ADCON0.6 
.................... 	#BIT CHS2	= ADCON0.5 
.................... 	#BIT CHS1	= ADCON0.4 
.................... 	#BIT CHS0	= ADCON0.3 
.................... 	#BIT GO_DONE	= ADCON0.2 
.................... 	#BIT ADON	= ADCON0.0 
.................... // PIE1 
.................... 	#BIT PSPIE	= PIE1.7 
.................... 	#BIT ADIE	= PIE1.6 
.................... 	#BIT RCIE	= PIE1.5 
.................... 	#BIT TXIE	= PIE1.4 
.................... 	#BIT SSPIE	= PIE1.3 
.................... 	#BIT CCP1IE	= PIE1.2 
.................... 	#BIT TMR2IE	= PIE1.1 
.................... 	#BIT TMR1IE	= PIE1.0 
.................... // PIE2 
.................... 	#BIT CMIE	= PIE2.6 
.................... 	#BIT EEIE	= PIE2.4 
.................... 	#BIT BCLIE	= PIE2.3 
.................... 	#BIT CCP2IE	= PIE2.0 
.................... #BYTE SSPCON2		= 0x91 
.................... 	#BIT GCEN	= SSPCON2.7 
.................... 	#BIT ACKSTAT	= SSPCON2.6 
.................... 	#BIT ACKDT	= SSPCON2.5 
.................... 	#BIT ACKEN	= SSPCON2.4 
.................... 	#BIT RCEN	= SSPCON2.3 
.................... 	#BIT PEN	= SSPCON2.2 
.................... 	#BIT RSEN	= SSPCON2.1 
.................... 	#BIT SEN	= SSPCON2.0 
.................... #BYTE SSPADD		= 0x93 
.................... #BYTE SSPSTAT		= 0x94 
.................... 	#BIT SMP	= SSPSTAT.7 
.................... 	#BIT CKE	= SSPSTAT.6 
.................... 	#BIT D_A	= SSPSTAT.5 
.................... 	#BIT P		= SSPSTAT.4 
.................... 	#BIT S		= SSPSTAT.3 
.................... 	#BIT R_W	= SSPSTAT.2 
.................... 	#BIT UA		= SSPSTAT.1 
.................... 	#BIT BF		= SSPSTAT.0 
.................... #BYTE TXSTA		= 0x98 
.................... 	#BIT CSRC	= TXSTA.7 
.................... 	#BIT TX9	= TXSTA.6 
.................... 	#BIT TXEN	= TXSTA.5 
.................... 	#BIT SYNC	= TXSTA.4 
.................... 	#BIT BRGH	= TXSTA.2 
.................... 	#BIT TRMT	= TXSTA.1 
.................... 	#BIT TX9D	= TXSTA.0 
.................... #BYTE SPBRG		= 0x99 
.................... #BYTE CMCON		= 0x9C 
.................... //	#BIT C2OUT	= CMCON.7	// Já definido nos arquivos pic16f87xa.h 
.................... //	#BIT C1OUT	= CMCON.6	// Já definido nos arquivos pic16f87xa.h 
.................... 	#BIT C2INV	= CMCON.5 
.................... 	#BIT C1INV	= CMCON.4 
.................... 	#BIT CIS	= CMCON.3 
.................... 	#BIT CM2	= CMCON.2 
.................... 	#BIT CM1	= CMCON.1 
.................... 	#BIT CM0	= CMCON.0 
.................... #BYTE CVRCON		= 0x9D 
.................... 	#BIT CVREN	= CVRCON.7 
.................... 	#BIT CVROE	= CVRCON.6 
.................... 	#BIT CVRR	= CVRCON.5 
.................... 	#BIT CVR3	= CVRCON.3 
.................... 	#BIT CVR2	= CVRCON.2 
.................... 	#BIT CVR1	= CVRCON.1 
.................... 	#BIT CVR0	= CVRCON.0 
.................... #BYTE ADRESL		= 0x9E 
.................... #BYTE ADCON1		= 0x9F 
.................... 	#BIT ADFM	= ADCON1.7 
.................... 	#BIT ADCS2	= ADCON1.6 
.................... 	#BIT PCFG3	= ADCON1.3 
.................... 	#BIT PCFG2	= ADCON1.2 
.................... 	#BIT PCFG1	= ADCON1.1 
.................... 	#BIT PCFG0	= ADCON1.0 
.................... #BYTE EEDATA		= 0x10C 
.................... #BYTE EEADR		= 0x10D 
.................... #BYTE EEDATH		= 0x10E 
.................... #BYTE EEADRH		= 0x10F 
.................... #BYTE EECON1		= 0x18C 
.................... 	#BIT EEPGD	= EECON1.7 
.................... 	#BIT WRERR	= EECON1.3 
.................... 	#BIT WREN	= EECON1.2 
.................... 	#BIT WR		= EECON1.1 
.................... 	#BIT RD		= EECON1.0 
.................... #BYTE EECON2		= 0x18D 
....................  
....................  
.................... #byte portb = 0x06 
....................  
.................... #INT_RDA  
.................... void SerialDataReceive()  
.................... {  
....................    char dado; 
....................     
....................    dado = getc(); 
*
0031:  BTFSS  0C.5
0032:  GOTO   031
0033:  MOVF   1A,W
0034:  MOVWF  2B
....................           
....................    if(dado == '1') 
0035:  MOVF   2B,W
0036:  SUBLW  31
0037:  BTFSS  03.2
0038:  GOTO   03D
....................       output_high(pin_B6); 
0039:  BSF    03.5
003A:  BCF    06.6
003B:  BCF    03.5
003C:  BSF    06.6
....................              
....................    if(dado == '2') 
003D:  MOVF   2B,W
003E:  SUBLW  32
003F:  BTFSS  03.2
0040:  GOTO   045
....................       output_high(pin_B7);   
0041:  BSF    03.5
0042:  BCF    06.7
0043:  BCF    03.5
0044:  BSF    06.7
0045:  BCF    0C.5
0046:  BCF    0A.3
0047:  GOTO   020
.................... }  
....................  
.................... void main() 
*
005D:  MOVF   03,W
005E:  ANDLW  1F
005F:  MOVWF  03
0060:  MOVLW  19
0061:  BSF    03.5
0062:  MOVWF  19
0063:  MOVLW  A6
0064:  MOVWF  18
0065:  MOVLW  90
0066:  BCF    03.5
0067:  MOVWF  18
0068:  MOVLW  07
0069:  MOVWF  1F
006A:  BCF    03.7
006B:  CLRF   28
.................... { 
....................    char a=0; 
....................     
....................    set_tris_b(0b00000010); 
006C:  MOVLW  02
006D:  BSF    03.5
006E:  MOVWF  06
....................    portb = 0x00; 
006F:  BCF    03.5
0070:  CLRF   06
....................     
....................    enable_interrupts(INT_RDA); 
0071:  BSF    03.5
0072:  BSF    0C.5
....................    enable_interrupts(GLOBAL); 
0073:  MOVLW  C0
0074:  BCF    03.5
0075:  IORWF  0B,F
....................  
....................    while (true) 
....................    { 
....................       if(a == 0) 
0076:  MOVF   28,F
0077:  BTFSS  03.2
0078:  GOTO   087
....................       { 
....................          output_high(pin_B5); 
0079:  BSF    03.5
007A:  BCF    06.5
007B:  BCF    03.5
007C:  BSF    06.5
....................          delay_ms(500); 
007D:  MOVLW  02
007E:  MOVWF  29
007F:  MOVLW  FA
0080:  MOVWF  2A
0081:  CALL   048
0082:  DECFSZ 29,F
0083:  GOTO   07F
....................          a=1; 
0084:  MOVLW  01
0085:  MOVWF  28
....................       } 
0086:  GOTO   093
....................       else 
....................       { 
....................          output_low(pin_B5); 
0087:  BSF    03.5
0088:  BCF    06.5
0089:  BCF    03.5
008A:  BCF    06.5
....................          delay_ms(500); 
008B:  MOVLW  02
008C:  MOVWF  29
008D:  MOVLW  FA
008E:  MOVWF  2A
008F:  CALL   048
0090:  DECFSZ 29,F
0091:  GOTO   08D
....................          a=0; 
0092:  CLRF   28
....................       }       
0093:  GOTO   076
....................    } 
.................... } 
....................         
0094:  SLEEP

Configuration Fuses:
   Word  1: 1F62   NOWDT PUT HS MCLR BROWNOUT NOLVP NOCPD PROTECT
